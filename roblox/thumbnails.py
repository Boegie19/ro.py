from enum import Enum
from typing import Optional
from datetime import datetime
from dateutil.parser import parse

from .utilities.shared import ClientSharedObject


class ThumbnailState(Enum):
    completed = "Completed"
    in_review = "InReview"
    pending = "Pending"
    error = "Error"
    moderated = "Moderated"


class ThumbnailReturnPolicy(Enum):
    place_holder = "PlaceHolder"
    auto_generated = "AutoGenerated"
    force_auto_generated = "ForceAutoGenerated"


class ThumbnailFormat(Enum):
    png = "Png"
    jpeg = "Jpeg"


class Thumbnail:
    def __init__(self, shared: ClientSharedObject, data: dict):
        self._shared: ClientSharedObject = shared
        self._data = data

        self.target_id: int = data["targetId"]
        self.state: ThumbnailState = ThumbnailState(data["state"])
        self.image_url: Optional[str] = data["imageUrl"]


class ThumbnailProvider:
    def __init__(self, shared: ClientSharedObject):
        self._shared: ClientSharedObject = shared

    async def get_asset_thumbnails(
        self,
        asset_ids: list[int],
        return_policy: ThumbnailReturnPolicy = ThumbnailReturnPolicy.place_holder,
        size: str = "30x30",
        format: ThumbnailFormat = ThumbnailFormat.png,
        is_circular: bool = False,
    ):
        thumbnails_response = await self._shared.requests.get(
            url=self._shared.url_generator.get_url("thumbnails", "v1/assets"),
            params={
                "assetIds": asset_ids,
                "returnPolicy": return_policy.value,
                "size": size,
                "format": format.value,
                "isCircular": is_circular,
            },
        )
        thumbnails_data = thumbnails_response.json()["data"]
        return [
            Thumbnail(shared=self._shared, data=thumbnail_data)
            for thumbnail_data in thumbnails_data
        ]
